% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logLik.CBFM.R
\name{logLik.CBFM}
\alias{logLik.CBFM}
\alias{logLik.CBFM_hurdle}
\title{Log-likelihood of a (hurdle) CBFM fit}
\usage{
\method{logLik}{CBFM}(object, use_edf = FALSE, ...)

\method{logLik}{CBFM_hurdle}(object, use_edf = FALSE, ...)
}
\arguments{
\item{object}{An object of class \code{CBFM} or \code{CBFM_hurdle}.}

\item{use_edf}{If \code{TRUE}, then the estimated degrees of freedom for the species-specific coefficients related to the spatial and/temporal basis functions is used instead. Defaults to \code{FALSE}, in which case species-specific coefficients related to the basis functions are regarded as fixed effects.}

\item{...}{Not used in this case.}
}
\value{
Returns an object of class "logLik".  This is a number with at least one attribute, "df" (degrees of freedom), giving the number of (estimated) parameters in the CBFM model; please see see \code{\link[stats:logLik]{stats::logLik()}}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Extracts the log-likelihood from a fitted \code{CBFM} or \code{CBFM_hurdle} object.
}
\details{
In this package, CBFM are fitted using maximized penalized quasi-likelihood or PQL estimation. In turn, this function returns the maximized log-likelihood value \emph{excluding} the quadratic penalty term in the PQL of the CBFM fit at convergence.

By default, the degrees of freedom calculated as part of this function is based on:
\enumerate{
\item using the estimated of effective degrees of freedom for the component of the model related to \code{object$formula} (and \code{object$ziformula} if appropriate) plus any nuisance parameters; see \code{\link[mgcv:logLik.gam]{mgcv::logLik.gam()}} for details about estimated degrees of freedom when smoothing terms are involved;.
\item treating the species-specific regression coefficients related to the spatial and/or temporal basis functions as fixed effects. Overall, this means the calculation of degrees of freedom only involves the number of regression coefficients in the model (see Hui et al., 2017, Hui, 2021, for justifications for these in the context of mixed models). Alternatively, if \code{use_edf = TRUE}, then point 2 is modified to instead use the estimated degrees of freedom instead. This is done by making a call to \code{\link[=edf.CBFM]{edf.CBFM()}} and we refer to the corresponding help file for more information.
}

The community-level covariance matrices are not involved in the calculation of the degrees of freedom.

For hurdle CBFMs, the log-likelihood and (estimated) degrees of freedom are calculated by straightforwardly summing the respective quantities in the two underlying component CBFMs.
}
\examples{
\dontrun{
library(autoFRK)
library(FRK)
library(MASS)
library(mvabund)
library(mvtnorm)
library(ROCR)
library(sp)
library(geoR)
library(tidyverse)

##------------------------------
## **Example 1: Fitting a CBFM to spatial multivariate presence-absence data** 
## simulated from a spatial latent variable model
## Please note the data generation process (thus) differs from CBFM.
##------------------------------
set.seed(2021)
num_sites <- 500 # 500 (units) sites 
num_spp <- 50 # Number of species
num_X <- 4 # Number of regression slopes

spp_slopes <- matrix(runif(num_spp * num_X, -1, 1), nrow = num_spp)
spp_intercepts <- runif(num_spp, -2, 0)

# Simulate spatial coordinates and environmental covariate components
xy <- data.frame(x = runif(num_sites, 0, 5), y = runif(num_sites, 0, 5))
X <- mvtnorm::rmvnorm(num_sites, mean = rep(0,4))
colnames(X) <- c("temp", "depth", "chla", "O2")
dat <- data.frame(xy, X)
mm <- model.matrix(~ temp + depth + chla + O2 - 1, data = dat) \%>\% 
scale \%>\% 
as.matrix

# Simulate latent variable component
true_lvs <- grf(grid = cbind(xy$x, xy$y), nsim = 2, cov.model = "exponential",
cov.pars = c(1, 2))$data \%>\%
     as.matrix
spp_loadings <- matrix(runif(num_spp * 2, -1, 1), nrow = num_spp)
set.seed(NULL)

# Simulate spatial multivariate abundance data (presence-absence)
eta <- tcrossprod(cbind(1,mm), cbind(spp_intercepts,spp_slopes)) + 
tcrossprod(true_lvs, spp_loadings)
simy <- matrix(rbinom(num_sites * num_spp, size = 1, 
prob = binomial()$linkinv(eta)), nrow = num_sites)
rm(X, mm, spp_loadings, true_lvs, xy, eta)


# Set up spatial basis functions for CBFM -- Most users will start here! 
num_basisfunctions <- 25 # Number of spatial basis functions to use
basisfunctions <- mrts(dat[,c("x","y")], num_basisfunctions) \%>\% 
as.matrix \%>\%
{.[,-(1)]} # Remove the first intercept column

# Fit CBFM 
useformula <- ~ temp + depth + chla + O2
fitcbfm <- CBFM(y = simy, formula = useformula, data = dat, 
B_space = basisfunctions, family = binomial(), control = list(trace = 1))

logLik(fitcbfm)

logLik(fitcbfm, use_edf = TRUE) # Degrees of freedom for this are much smaller


# See also the examples in the help file for the makeahurdle function.
}

}
\references{
Hui, F. K. C., Mueller, S., and Welsh, A. H. (2017). Joint selection in mixed models using regularized PQL. Journal of the American Statistical Association, 112, 1323-1333.

Hui, F. K. C.(2021). On the use of a penalized quasi-likelihood information criterion for generalized linear mixed models. Biometrika, 108, 353-365.
}
\seealso{
\code{\link[=CBFM]{CBFM()}} for fitting CBFMs, and \code{\link[=AIC.CBFM]{AIC.CBFM()}} and \code{\link[=AICc.CBFM]{AICc.CBFM()}} for calculation various information criteria from a CBFM fit.
}
\author{
Francis K.C. Hui \href{mailto:fhui28@gmail.com}{fhui28@gmail.com}, Chris Haak
}
